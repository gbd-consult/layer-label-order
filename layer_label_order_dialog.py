# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LayerLabelOrderDialog
                                 A QGIS plugin
 Plugin zur Festlegung der Labelrangfolge
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2018-05-07
        git sha              : $Format:%H$
        copyright            : (C) 2018 by GBD Consult GmbH
        email                : gebbert@gbd-consult.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt5 import uic
from PyQt5 import QtWidgets

from qgis.core import *
from qgis.gui import *
# from qgis.gui import QgsMessageBar


FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'layer_label_order_dialog_base.ui'))


class LayerLabelOrderDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, iface, parent=None):
        """Constructor."""
        super(LayerLabelOrderDialog, self).__init__(parent)

        self.iface = iface
        self.layer_check_box = dict()
        self.setupUi(self)
        self.pushButtonAccept.released.connect(self.set_render_states)
        self.pushButtonOk.released.connect(self.set_render_states)
        self.tableWidget.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)

    def load_vector_layers(self):
        """Load all vector layers and their render status
        """
        self.layer_check_box = {}

        instance = QgsProject.instance()
        layers = instance.mapLayers()

        self.tableWidget.clear()
        self.tableWidget.setColumnCount(3);
        self.tableWidget.setHorizontalHeaderLabels(["Layer name", "Render after labeling", "Layer id"])
        self.tableWidget.setRowCount(len(layers));

        count = 0
        for layer_name in layers:
            layer = layers[layer_name]

            prop = layer.customProperty("rendering/renderAboveLabels")
            if prop:
                if "true" in prop:
                    prop = True
                else:
                    prop = False
            else:
                prop = False

            layer_name = QtWidgets.QTableWidgetItem(layer.name())
            layer_id = QtWidgets.QTableWidgetItem(layer.id())
            check = QtWidgets.QCheckBox()
            if prop is True:
                check.setCheckState(2)
            else:
                check.setCheckState(0)

            self.layer_check_box[layer.id()] = (check, layer)

            self.tableWidget.setItem(count, 0, layer_name)
            self.tableWidget.setCellWidget(count, 1, check)
            self.tableWidget.setItem(count, 2, layer_id)
            count += 1

        self.tableWidget.resizeColumnsToContents()

    def set_render_states(self):
        """Set the render state of all vector layers
        """

        for row in range(self.tableWidget.rowCount()):
            layer_id = self.tableWidget.item(row, 2).text()

            check, layer = self.layer_check_box[layer_id]
            # self.iface.messageBar().pushMessage(str(check.checkState()), layer.name())

            if bool(check.checkState()) is True:
                layer.setCustomProperty("rendering/renderAboveLabels", "true")
            else:
                layer.setCustomProperty("rendering/renderAboveLabels", "false")

        self.iface.mapCanvas().refresh()
